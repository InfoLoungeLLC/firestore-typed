name: Release to npm

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Get package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists on npm
        run: |
          VERSION=${{ steps.package-version.outputs.version }}
          if npm view @info-lounge/firestore-typed@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already exists on npm"
            exit 1
          fi
          echo "Version $VERSION is available for publishing"

      - name: Check if tag exists
        run: |
          TAG=${{ steps.package-version.outputs.tag }}
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG already exists"
            exit 1
          fi
          echo "Tag $TAG is available"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Type check
        run: npm run typecheck

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      - name: Create Git tag
        run: |
          TAG=${{ steps.package-version.outputs.tag }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $TAG -m "Release $TAG"
          git push origin $TAG

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION=${{ steps.package-version.outputs.version }}
          
          # Extract changelog section for this version
          awk -v version="[$VERSION]" '
            /^## \[/ { 
              if (found) exit
              if ($0 ~ version) found=1
            }
            found && !/^## \[/ { print }
            found && /^## \[/ && $0 !~ version { exit }
          ' CHANGELOG.md > release_notes.md
          
          # Remove the first empty line if it exists
          sed -i '1{/^$/d;}' release_notes.md
          
          echo "Release notes extracted for version $VERSION"

      - name: Create GitHub Release
        run: |
          gh release create ${{ steps.package-version.outputs.tag }} \
            --title "Release ${{ steps.package-version.outputs.tag }}" \
            --notes-file release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
